plugins {
	id 'org.springframework.boot' version '2.2.2.RELEASE'
	id 'io.spring.dependency-management' version '1.0.8.RELEASE'
	id 'java'
	id 'com.google.cloud.tools.jib' version '1.8.0'
}
jib {
	to {
		image = 'gcr.io/inf-5065/circuitbreacker'
		auth {
			username = '_json_key'
			password = file('cuentaServicioSifaPoCCeiba.json').text
		}
	}
}

group = 'com.poc'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '1.8'

configurations {
	developmentOnly
	runtimeClasspath {
		extendsFrom developmentOnly
	}
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()
}

ext {
	set('springCloudVersion', "Hoxton.RELEASE")
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'org.springframework.cloud:spring-cloud-starter-circuitbreaker-resilience4j'
	compileOnly 'org.projectlombok:lombok'
	developmentOnly 'org.springframework.boot:spring-boot-devtools'
	annotationProcessor 'org.projectlombok:lombok'
	testImplementation('org.springframework.boot:spring-boot-starter-test') {
		exclude group: 'org.junit.vintage', module: 'junit-vintage-engine'
	}
}

dependencyManagement {
	imports {
		mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
	}
}

test {
	useJUnitPlatform()
}

task deleteDockerDir(type: Delete) {
	delete "${buildDir}/docker"
}

task unzipBoot(type: Copy) {
	def zipFile = file("${buildDir}/libs/" + project.name + '-' + project.version + '.jar')
	def outputDir = file("${buildDir}/docker/app")

	from zipTree(zipFile)
	into outputDir

	def copyDetails = []
	eachFile { copyDetails << it } doLast { copyDetails.each { FileCopyDetails details ->
		def target = new File(outputDir, details.path)
		if (target.exists()) {
			target.setLastModified(details.lastModified)
		}
	}
	}
}
unzipBoot.dependsOn deleteDockerDir

task moveBootExplodedLib() {
	doLast {
		ant.move(file: "${buildDir}/docker/app/BOOT-INF/lib", toFile: "${buildDir}/docker/lib")
	}
}
moveBootExplodedLib.dependsOn unzipBoot
build.finalizedBy(moveBootExplodedLib)
